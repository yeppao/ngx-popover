{"version":3,"sources":["ng://ngx-popover/PopoverContent.ts","ng://ngx-popover/Popover.ts","ng://ngx-popover/index.ts"],"names":["PopoverContent","element","cdr","renderer","_this","this","EventEmitter","event","nativeElement","popover","contains","target","getElement","hide","onCloseFromOutside","emit","undefined","prototype","ngAfterViewInit","closeOnClickOutside","listenClickFunc","listen","onDocumentMouseDown","closeOnMouseOutside","listenMouseFunc","show","detectChanges","ngOnDestroy","p","positionElements","popoverDiv","placement","displayType","top","left","isIn","hideFromPopover","hostEl","targetEl","positionStr","appendToBody","positionStrParts","split","pos0","pos1","hostElPos","offset","position","targetElWidth","offsetWidth","targetElHeight","offsetHeight","effectivePlacement","getEffectivePlacement","targetElPos","shiftWidth","center","width","right","shiftHeight","height","bottom","nativeEl","offsetParentBCR","elBCR","offsetParentEl","parentOffsetEl","window","document","clientTop","scrollTop","clientLeft","scrollLeft","boundingClientRect","getBoundingClientRect","pageYOffset","documentElement","pageXOffset","getStyle","cssProp","currentStyle","getComputedStyle","isStaticPositioned","offsetParent","hostElement","targetElement","placementParts","hostElBoundingRect","desiredPlacement","innerHeight","innerWidth","Component","args","selector","template","ElementRef","ChangeDetectorRef","Renderer2","Input","ViewChild","Popover","viewContainerRef","resolver","showOrHideOnClick","popoverOnHover","popoverDisabled","toggle","showOnHover","hideOnHover","popoverCloseOnMouseOutside","ngOnChanges","changes","currentValue","visible","content","factory","resolveComponentFactory","PopoverComponent","createComponent","popoverPlacement","popoverAnimation","animation","popoverTitle","title","popoverCloseOnClickOutside","subscribe","popoverDismissTimeout","setTimeout","onShown","destroy","onHidden","Directive","exportAs","ViewContainerRef","ComponentFactoryResolver","Output","HostListener","type","PopoverModule","NgModule","imports","CommonModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import {Component, Input, AfterViewInit, ElementRef, ChangeDetectorRef, OnDestroy, ViewChild, EventEmitter, Renderer2 } from \"@angular/core\";\nimport {Popover} from \"./Popover\";\n\n@Component({\n    selector: \"popover-content\",\n    template: `\n<div #popoverDiv class=\"popover {{ effectivePlacement }}\"\n     [style.top]=\"top + 'px'\"\n     [style.left]=\"left + 'px'\"\n     [class.in]=\"isIn\"\n     [class.fade]=\"animation\"\n     style=\"display: block\"\n     role=\"popover\">\n    <div [hidden]=\"!closeOnMouseOutside\" class=\"virtual-area\"></div>\n    <div class=\"arrow\"></div> \n    <h3 class=\"popover-title\" [hidden]=\"!title\">{{ title }}</h3>\n    <div class=\"popover-content\">\n        <ng-content></ng-content>\n        {{ content }}\n    </div> \n</div>\n`,\n    styles: [`\n.popover .virtual-area {\n    height: 11px;\n    width: 100%;\n    position: absolute;\n}\n.popover.top .virtual-area {\n    bottom: -11px; \n}\n.popover.bottom .virtual-area {\n    top: -11px; \n}\n.popover.left .virtual-area {\n    right: -11px; \n}\n.popover.right .virtual-area {\n    left: -11px; \n}\n`]\n})\nexport class PopoverContent implements AfterViewInit, OnDestroy {\n\n    // -------------------------------------------------------------------------\n    // Inputs / Outputs \n    // -------------------------------------------------------------------------\n\n    // @Input()\n    // hostElement: HTMLElement;\n\n    @Input()\n    content: string;\n\n    @Input()\n    placement: \"top\"|\"bottom\"|\"left\"|\"right\"|\"auto\"|\"auto top\"|\"auto bottom\"|\"auto left\"|\"auto right\" = \"bottom\";\n\n    @Input()\n    title: string;\n\n    @Input()\n    animation: boolean = true;\n\n    @Input()\n    closeOnClickOutside: boolean = false;\n\n    @Input()\n    closeOnMouseOutside: boolean = false;\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    @ViewChild(\"popoverDiv\")\n    popoverDiv: ElementRef;\n\n    popover: Popover;\n    onCloseFromOutside = new EventEmitter();\n    top: number = -10000;\n    left: number = -10000;\n    isIn: boolean = false;\n    displayType: string = \"none\";\n    effectivePlacement: string;\n\n    // -------------------------------------------------------------------------\n    // Anonymous \n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes dropdown if user clicks outside of this directive.\n     */\n    onDocumentMouseDown = (event: any) => {\n        const element = this.element.nativeElement;\n        if (!element || !this.popover) return;\n        if (element.contains(event.target) || this.popover.getElement().contains(event.target)) return;\n        this.hide();\n        this.onCloseFromOutside.emit(undefined);\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected element: ElementRef,\n                protected cdr: ChangeDetectorRef,\n                protected renderer: Renderer2) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Lifecycle callbacks\n    // -------------------------------------------------------------------------\n\n    listenClickFunc: any;\n    listenMouseFunc: any;\n    ngAfterViewInit(): void {\n        if (this.closeOnClickOutside)\n            this.listenClickFunc = this.renderer.listen(\"document\", \"mousedown\", (event: any) => this.onDocumentMouseDown(event));\n        if (this.closeOnMouseOutside)\n            this.listenMouseFunc = this.renderer.listen(\"document\", \"mouseover\", (event: any) => this.onDocumentMouseDown(event));\n\n        this.show();\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n        if (this.closeOnClickOutside)\n            this.listenClickFunc();\n        if (this.closeOnMouseOutside)\n            this.listenMouseFunc();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    show(): void {\n        if (!this.popover || !this.popover.getElement())\n            return;\n\n        const p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);\n        this.displayType = \"block\";\n        this.top = p.top;\n        this.left = p.left;\n        this.isIn = true;\n    }\n\n    hide(): void {\n        this.top = -10000;\n        this.left = -10000;\n        this.isIn = true;\n        this.popover.hide();\n    }\n\n    hideFromPopover() {\n        this.top = -10000;\n        this.left = -10000;\n        this.isIn = true;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected positionElements(hostEl: HTMLElement, targetEl: HTMLElement, positionStr: string, appendToBody: boolean = false): { top: number, left: number } {\n        let positionStrParts = positionStr.split(\"-\");\n        let pos0 = positionStrParts[0];\n        let pos1 = positionStrParts[1] || \"center\";\n        let hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);\n        let targetElWidth = targetEl.offsetWidth;\n        let targetElHeight = targetEl.offsetHeight;\n\n        this.effectivePlacement = pos0 = this.getEffectivePlacement(pos0, hostEl, targetEl);\n\n        let shiftWidth: any = {\n            center: function (): number {\n                return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;\n            },\n            left: function (): number {\n                return hostElPos.left;\n            },\n            right: function (): number {\n                return hostElPos.left + hostElPos.width;\n            }\n        };\n\n        let shiftHeight: any = {\n            center: function (): number {\n                return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;\n            },\n            top: function (): number {\n                return hostElPos.top;\n            },\n            bottom: function (): number {\n                return hostElPos.top + hostElPos.height;\n            }\n        };\n\n        let targetElPos: { top: number, left: number };\n        switch (pos0) {\n            case \"right\":\n                targetElPos = {\n                    top: shiftHeight[pos1](),\n                    left: shiftWidth[pos0]()\n                };\n                break;\n\n            case \"left\":\n                targetElPos = {\n                    top: shiftHeight[pos1](),\n                    left: hostElPos.left - targetElWidth\n                };\n                break;\n\n            case \"bottom\":\n                targetElPos = {\n                    top: shiftHeight[pos0](),\n                    left: shiftWidth[pos1]()\n                };\n                break;\n\n            default:\n                targetElPos = {\n                    top: hostElPos.top - targetElHeight,\n                    left: shiftWidth[pos1]()\n                };\n                break;\n        }\n\n        return targetElPos;\n    }\n\n    protected position(nativeEl: HTMLElement): { width: number, height: number, top: number, left: number } {\n        let offsetParentBCR = { top: 0, left: 0 };\n        const elBCR = this.offset(nativeEl);\n        const offsetParentEl = this.parentOffsetEl(nativeEl);\n        if (offsetParentEl !== window.document) {\n            offsetParentBCR = this.offset(offsetParentEl);\n            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;\n            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;\n        }\n\n        const boundingClientRect = nativeEl.getBoundingClientRect();\n        return {\n            width: boundingClientRect.width || nativeEl.offsetWidth,\n            height: boundingClientRect.height || nativeEl.offsetHeight,\n            top: elBCR.top - offsetParentBCR.top,\n            left: elBCR.left - offsetParentBCR.left\n        };\n    }\n\n    protected offset(nativeEl: any): { width: number, height: number, top: number, left: number } {\n        const boundingClientRect = nativeEl.getBoundingClientRect();\n        return {\n            width: boundingClientRect.width || nativeEl.offsetWidth,\n            height: boundingClientRect.height || nativeEl.offsetHeight,\n            top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),\n            left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft)\n        };\n    }\n\n    protected getStyle(nativeEl: HTMLElement, cssProp: string): string {\n        if ((nativeEl as any).currentStyle) // IE\n            return (nativeEl as any).currentStyle[cssProp];\n\n        if (window.getComputedStyle)\n            return (window.getComputedStyle as any)(nativeEl)[cssProp];\n\n        // finally try and get inline style\n        return (nativeEl.style as any)[cssProp];\n    }\n\n    protected isStaticPositioned(nativeEl: HTMLElement): boolean {\n        return (this.getStyle(nativeEl, \"position\") || \"static\" ) === \"static\";\n    }\n\n    protected parentOffsetEl(nativeEl: HTMLElement): any {\n        let offsetParent: any = nativeEl.offsetParent || window.document;\n        while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {\n            offsetParent = offsetParent.offsetParent;\n        }\n        return offsetParent || window.document;\n    }\n\n    protected getEffectivePlacement(placement: string, hostElement: HTMLElement, targetElement: HTMLElement): string {\n        const placementParts = placement.split(\" \");\n        if (placementParts[0] !== \"auto\") {\n            return placement;\n        }\n\n        const hostElBoundingRect = hostElement.getBoundingClientRect();\n\n        const desiredPlacement = placementParts[1] || \"bottom\";\n\n        if (desiredPlacement === \"top\" && hostElBoundingRect.top - targetElement.offsetHeight < 0) {\n            return \"bottom\";\n        }\n        if (desiredPlacement === \"bottom\" && hostElBoundingRect.bottom + targetElement.offsetHeight > window.innerHeight) {\n            return \"top\";\n        }\n        if (desiredPlacement === \"left\" && hostElBoundingRect.left - targetElement.offsetWidth < 0) {\n            return \"right\";\n        }\n        if (desiredPlacement === \"right\" && hostElBoundingRect.right + targetElement.offsetWidth > window.innerWidth) {\n            return \"left\";\n        }\n\n        return desiredPlacement;\n    }\n}\n","import { Directive, HostListener, ComponentRef, ViewContainerRef, ComponentFactoryResolver, ComponentFactory, Input, OnChanges, SimpleChange, Output, EventEmitter } from \"@angular/core\";\nimport {PopoverContent} from \"./PopoverContent\";\n\n@Directive({\n    selector: \"[popover]\",\n    exportAs: \"popover\"\n})\nexport class Popover implements OnChanges {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    protected PopoverComponent = PopoverContent;\n    protected popover: ComponentRef<PopoverContent>;\n    protected visible: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected resolver: ComponentFactoryResolver) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Inputs / Outputs\n    // -------------------------------------------------------------------------\n\n    @Input(\"popover\")\n    content: string|PopoverContent;\n\n    @Input()\n    popoverDisabled: boolean;\n\n    @Input()\n    popoverAnimation: boolean;\n\n    @Input()\n    popoverPlacement: \"top\"|\"bottom\"|\"left\"|\"right\"|\"auto\"|\"auto top\"|\"auto bottom\"|\"auto left\"|\"auto right\";\n\n    @Input()\n    popoverTitle: string;\n\n    @Input()\n    popoverOnHover: boolean = false;\n\n    @Input()\n    popoverCloseOnClickOutside: boolean;\n\n    @Input()\n    popoverCloseOnMouseOutside: boolean;\n\n    @Input()\n    popoverDismissTimeout: number = 0;\n\n    @Output()\n    onShown = new EventEmitter<Popover>();\n\n    @Output()\n    onHidden = new EventEmitter<Popover>();\n\n    // -------------------------------------------------------------------------\n    // Event listeners\n    // -------------------------------------------------------------------------\n\n    @HostListener(\"click\")\n    showOrHideOnClick(): void {\n        if (this.popoverOnHover) return;\n        if (this.popoverDisabled) return;\n        this.toggle();\n    }\n\n    @HostListener(\"focusin\")\n    @HostListener(\"mouseenter\")\n    showOnHover(): void {\n        if (!this.popoverOnHover) return;\n        if (this.popoverDisabled) return;\n        this.show();\n    }\n\n    @HostListener(\"focusout\")\n    @HostListener(\"mouseleave\")\n    hideOnHover(): void {\n        if (this.popoverCloseOnMouseOutside) return; // don't do anything since not we control this\n        if (!this.popoverOnHover) return;\n        if (this.popoverDisabled) return;\n        this.hide();\n    }\n\n    ngOnChanges(changes: {[propertyName: string]: SimpleChange}) {\n        if (changes[\"popoverDisabled\"]) {\n            if (changes[\"popoverDisabled\"].currentValue) {\n                this.hide();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    toggle() {\n        if (!this.visible) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n\n    show() {\n        if (this.visible) return;\n\n        this.visible = true;\n        if (typeof this.content === \"string\") {\n            const factory = this.resolver.resolveComponentFactory(this.PopoverComponent);\n            if (!this.visible)\n                return;\n\n            this.popover = this.viewContainerRef.createComponent(factory);\n            const popover = this.popover.instance as PopoverContent;\n            popover.popover = this;\n            popover.content = this.content as string;\n            if (this.popoverPlacement !== undefined)\n                popover.placement = this.popoverPlacement;\n            if (this.popoverAnimation !== undefined)\n                popover.animation = this.popoverAnimation;\n            if (this.popoverTitle !== undefined)\n                popover.title = this.popoverTitle;\n            if (this.popoverCloseOnClickOutside !== undefined)\n                popover.closeOnClickOutside = this.popoverCloseOnClickOutside;\n            if (this.popoverCloseOnMouseOutside !== undefined)\n                popover.closeOnMouseOutside = this.popoverCloseOnMouseOutside;\n\n            popover.onCloseFromOutside.subscribe(() => this.hide());\n            // if dismissTimeout option is set, then this popover will be dismissed in dismissTimeout time\n            if (this.popoverDismissTimeout > 0)\n                setTimeout(() => this.hide(), this.popoverDismissTimeout);\n        } else {\n            const popover = this.content as PopoverContent;\n            popover.popover = this;\n            if (this.popoverPlacement !== undefined)\n                popover.placement = this.popoverPlacement;\n            if (this.popoverAnimation !== undefined)\n                popover.animation = this.popoverAnimation;\n            if (this.popoverTitle !== undefined)\n                popover.title = this.popoverTitle;\n            if (this.popoverCloseOnClickOutside !== undefined)\n                popover.closeOnClickOutside = this.popoverCloseOnClickOutside;\n            if (this.popoverCloseOnMouseOutside !== undefined)\n                popover.closeOnMouseOutside = this.popoverCloseOnMouseOutside;\n\n            popover.onCloseFromOutside.subscribe(() => this.hide());\n            // if dismissTimeout option is set, then this popover will be dismissed in dismissTimeout time\n            if (this.popoverDismissTimeout > 0)\n                setTimeout(() => this.hide(), this.popoverDismissTimeout);\n            popover.show();\n        }\n\n        this.onShown.emit(this);\n    }\n\n    hide() {\n        if (!this.visible) return;\n\n        this.visible = false;\n        if (this.popover)\n            this.popover.destroy();\n\n        if (this.content instanceof PopoverContent)\n            (this.content as PopoverContent).hideFromPopover();\n\n        this.onHidden.emit(this);\n    }\n\n    getElement() {\n        return this.viewContainerRef.element.nativeElement;\n    }\n\n}\n","import {CommonModule} from \"@angular/common\";\nimport {Popover} from \"./Popover\";\nimport {PopoverContent} from \"./PopoverContent\";\nimport {NgModule} from \"@angular/core\";\n\nexport * from \"./Popover\";\nexport * from \"./PopoverContent\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        PopoverContent,\n        Popover,\n    ],\n    exports: [\n        PopoverContent,\n        Popover,\n    ],\n    entryComponents: [\n        PopoverContent\n    ]\n})\nexport default class PopoverModule {\n    \n}"]}